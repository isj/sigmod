#pragma once

#include "config.h"
#include "stdio.h"
#include "algorithm"

#include <immintrin.h>

#define INTS_IN_128_BITS (16 / sizeof(int))

#ifdef PRINT_STATISTICS
#include "statistics.h"
#endif

START_NAMESPACE

const char transitions[] = {0, 1, 4, 5, 16, 17, 20, 21, 1, 1, 5, 6, 17, 17, 21, 22, 2, 1, 6, 6, 18, 17, 22, 22, 3, 1, 7, 6, 19, 17, 23, 22, 4, 5, 4, 5, 20, 21, 20, 21, 5, 6, 5, 6, 21, 22, 25, 26, 6, 6, 6, 6, 22, 22, 26, 27, 7, 6, 7, 6, 23, 22, 27, 27, 8, 9, 4, 5, 24, 25, 20, 21, 9, 10, 5, 6, 25, 26, 25, 26, 10, 11, 6, 6, 26, 27, 26, 27, 11, 11, 7, 6, 27, 27, 27, 27, 12, 13, 4, 5, 28, 29, 20, 21, 13, 14, 5, 6, 29, 30, 25, 26, 14, 15, 6, 6, 30, 31, 26, 27, 15, 15, 7, 6, 31, 31, 27, 27, 16, 17, 20, 21, 16, 17, 20, 21, 17, 17, 21, 22, 17, 17, 21, 22, 18, 17, 22, 22, 18, 17, 22, 22, 19, 17, 23, 22, 19, 17, 23, 22, 20, 21, 20, 21, 36, 37, 36, 37, 21, 22, 25, 26, 37, 38, 41, 42, 22, 22, 26, 27, 38, 38, 42, 43, 23, 22, 27, 27, 39, 38, 43, 43, 24, 25, 20, 21, 40, 41, 36, 37, 25, 26, 25, 26, 41, 42, 41, 42, 26, 27, 26, 27, 42, 43, 46, 47, 27, 27, 27, 27, 43, 43, 47, 47, 28, 29, 20, 21, 44, 45, 36, 37, 29, 30, 25, 26, 45, 46, 41, 42, 30, 31, 26, 27, 46, 47, 46, 47, 31, 31, 27, 27, 47, 47, 47, 47, 32, 33, 36, 37, 16, 17, 20, 21, 33, 33, 37, 38, 17, 17, 21, 22, 34, 33, 38, 38, 18, 17, 22, 22, 35, 33, 39, 38, 19, 17, 23, 22, 36, 37, 36, 37, 36, 37, 36, 37, 37, 38, 41, 42, 37, 38, 41, 42, 38, 38, 42, 43, 38, 38, 42, 43, 39, 38, 43, 43, 39, 38, 43, 43, 40, 41, 36, 37, 56, 57, 52, 53, 41, 42, 41, 42, 57, 58, 57, 58, 42, 43, 46, 47, 58, 59, 62, 63, 43, 43, 47, 47, 59, 59, 63, 63, 44, 45, 36, 37, 60, 61, 52, 53, 45, 46, 41, 42, 61, 62, 57, 58, 46, 47, 46, 47, 62, 63, 62, 63, 47, 47, 47, 47, 63, 63, 127, 127, 48, 49, 52, 53, 16, 17, 20, 21, 49, 49, 53, 54, 17, 17, 21, 22, 50, 49, 54, 54, 18, 17, 22, 22, 51, 49, 55, 54, 19, 17, 23, 22, 52, 53, 52, 53, 36, 37, 36, 37, 53, 54, 57, 58, 37, 38, 41, 42, 54, 54, 58, 59, 38, 38, 42, 43, 55, 54, 59, 59, 39, 38, 43, 43, 56, 57, 52, 53, 56, 57, 52, 53, 57, 58, 57, 58, 57, 58, 57, 58, 58, 59, 62, 63, 58, 59, 62, 63, 59, 59, 63, 63, 59, 59, 63, 63, 60, 61, 52, 53, 60, 61, 52, 53, 61, 62, 57, 58, 61, 62, 57, 58, 62, 63, 62, 63, 62, 63, 62, 63, 63, 63, 127, 127, 63, 63, 127, 127};

const unsigned char transitions1[] =
{0, 1, 4, 5, 16, 17, 20, 21, 64, 65, 68, 69, 80, 81, 84, 85,
1, 1, 5, 6, 17, 17, 21, 22, 65, 65, 69, 70, 81, 81, 85, 86,
2, 1, 6, 6, 18, 17, 22, 22, 66, 65, 70, 70, 82, 81, 86, 86,
3, 1, 7, 6, 19, 17, 23, 22, 67, 65, 71, 70, 83, 81, 87, 86,
4, 5, 4, 5, 20, 21, 20, 21, 68, 69, 68, 69, 84, 85, 84, 85,
5, 6, 5, 6, 21, 22, 25, 26, 69, 70, 69, 70, 85, 86, 89, 90,
6, 6, 6, 6, 22, 22, 26, 27, 70, 70, 70, 70, 86, 86, 90, 91,
7, 6, 7, 6, 23, 22, 27, 27, 71, 70, 71, 70, 87, 86, 91, 91,
8, 9, 4, 5, 24, 25, 20, 21, 72, 73, 68, 69, 88, 89, 84, 85,
9, 10, 5, 6, 25, 26, 25, 26, 73, 74, 69, 70, 89, 90, 89, 90,
10, 11, 6, 6, 26, 27, 26, 27, 74, 75, 70, 70, 90, 91, 90, 91,
11, 11, 7, 6, 27, 27, 27, 27, 75, 75, 71, 70, 91, 91, 91, 91,
12, 13, 4, 5, 28, 29, 20, 21, 76, 77, 68, 69, 92, 93, 84, 85,
13, 14, 5, 6, 29, 30, 25, 26, 77, 78, 69, 70, 93, 94, 89, 90,
14, 15, 6, 6, 30, 31, 26, 27, 78, 79, 70, 70, 94, 95, 90, 91,
15, 15, 7, 6, 31, 31, 27, 27, 79, 79, 71, 70, 95, 95, 91, 91,
16, 17, 20, 21, 16, 17, 20, 21, 80, 81, 84, 85, 80, 81, 84, 85,
17, 17, 21, 22, 17, 17, 21, 22, 81, 81, 85, 86, 81, 81, 85, 86,
18, 17, 22, 22, 18, 17, 22, 22, 82, 81, 86, 86, 82, 81, 86, 86,
19, 17, 23, 22, 19, 17, 23, 22, 83, 81, 87, 86, 83, 81, 87, 86,
20, 21, 20, 21, 20, 21, 20, 21, 84, 85, 84, 85, 100, 101, 100, 101,
21, 22, 25, 26, 21, 22, 25, 26, 85, 86, 89, 90, 101, 102, 105, 106,
22, 22, 26, 27, 22, 22, 26, 27, 86, 86, 90, 91, 102, 102, 106, 107,
23, 22, 27, 27, 23, 22, 27, 27, 87, 86, 91, 91, 103, 102, 107, 107,
24, 25, 20, 21, 24, 25, 20, 21, 88, 89, 84, 85, 104, 105, 100, 101,
25, 26, 25, 26, 25, 26, 25, 26, 89, 90, 89, 90, 105, 106, 105, 106,
26, 27, 26, 27, 26, 27, 26, 27, 90, 91, 90, 91, 106, 107, 110, 111,
27, 27, 27, 27, 27, 27, 27, 27, 91, 91, 91, 91, 107, 107, 111, 111,
28, 29, 20, 21, 28, 29, 20, 21, 92, 93, 84, 85, 108, 109, 100, 101,
29, 30, 25, 26, 29, 30, 25, 26, 93, 94, 89, 90, 109, 110, 105, 106,
30, 31, 26, 27, 30, 31, 26, 27, 94, 95, 90, 91, 110, 111, 110, 111,
31, 31, 27, 27, 31, 31, 27, 27, 95, 95, 91, 91, 111, 111, 111, 111,
32, 33, 36, 37, 16, 17, 20, 21, 96, 97, 100, 101, 80, 81, 84, 85,
33, 33, 37, 38, 17, 17, 21, 22, 97, 97, 101, 102, 81, 81, 85, 86,
34, 33, 38, 38, 18, 17, 22, 22, 98, 97, 102, 102, 82, 81, 86, 86,
35, 33, 39, 38, 19, 17, 23, 22, 99, 97, 103, 102, 83, 81, 87, 86,
36, 37, 36, 37, 20, 21, 20, 21, 100, 101, 100, 101, 100, 101, 100, 101,
37, 38, 41, 42, 21, 22, 25, 26, 101, 102, 105, 106, 101, 102, 105, 106,
38, 38, 42, 43, 22, 22, 26, 27, 102, 102, 106, 107, 102, 102, 106, 107,
39, 38, 43, 43, 23, 22, 27, 27, 103, 102, 107, 107, 103, 102, 107, 107,
40, 41, 36, 37, 24, 25, 20, 21, 104, 105, 100, 101, 104, 105, 100, 101,
41, 42, 41, 42, 25, 26, 25, 26, 105, 106, 105, 106, 105, 106, 105, 106,
42, 43, 46, 47, 26, 27, 26, 27, 106, 107, 110, 111, 106, 107, 110, 111,
43, 43, 47, 47, 27, 27, 27, 27, 107, 107, 111, 111, 107, 107, 111, 111,
44, 45, 36, 37, 28, 29, 20, 21, 108, 109, 100, 101, 108, 109, 100, 101,
45, 46, 41, 42, 29, 30, 25, 26, 109, 110, 105, 106, 109, 110, 105, 106,
46, 47, 46, 47, 30, 31, 26, 27, 110, 111, 110, 111, 110, 111, 110, 111,
47, 47, 47, 47, 31, 31, 27, 27, 111, 111, 111, 111, 111, 111, 111, 111,
48, 49, 52, 53, 16, 17, 20, 21, 112, 113, 116, 117, 80, 81, 84, 85,
49, 49, 53, 54, 17, 17, 21, 22, 113, 113, 117, 118, 81, 81, 85, 86,
50, 49, 54, 54, 18, 17, 22, 22, 114, 113, 118, 118, 82, 81, 86, 86,
51, 49, 55, 54, 19, 17, 23, 22, 115, 113, 119, 118, 83, 81, 87, 86,
52, 53, 52, 53, 20, 21, 20, 21, 116, 117, 116, 117, 100, 101, 100, 101,
53, 54, 57, 58, 21, 22, 25, 26, 117, 118, 121, 122, 101, 102, 105, 106,
54, 54, 58, 59, 22, 22, 26, 27, 118, 118, 122, 123, 102, 102, 106, 107,
55, 54, 59, 59, 23, 22, 27, 27, 119, 118, 123, 123, 103, 102, 107, 107,
56, 57, 52, 53, 24, 25, 20, 21, 120, 121, 116, 117, 104, 105, 100, 101,
57, 58, 57, 58, 25, 26, 25, 26, 121, 122, 121, 122, 105, 106, 105, 106,
58, 59, 62, 63, 26, 27, 26, 27, 122, 123, 126, 127, 106, 107, 110, 111,
59, 59, 63, 63, 27, 27, 27, 27, 123, 123, 127, 127, 107, 107, 111, 111,
60, 61, 52, 53, 28, 29, 20, 21, 124, 125, 116, 117, 108, 109, 100, 101,
61, 62, 57, 58, 29, 30, 25, 26, 125, 126, 121, 122, 109, 110, 105, 106,
62, 63, 62, 63, 30, 31, 26, 27, 126, 127, 126, 127, 110, 111, 110, 111,
63, 63, 0, 0, 31, 31, 27, 27, 127, 127, 0, 0, 111, 111, 111, 111,
64, 65, 68, 69, 80, 81, 84, 85, 64, 65, 68, 69, 80, 81, 84, 85,
65, 65, 69, 70, 81, 81, 85, 86, 65, 65, 69, 70, 81, 81, 85, 86,
66, 65, 70, 70, 82, 81, 86, 86, 66, 65, 70, 70, 82, 81, 86, 86,
67, 65, 71, 70, 83, 81, 87, 86, 67, 65, 71, 70, 83, 81, 87, 86,
68, 69, 68, 69, 84, 85, 84, 85, 68, 69, 68, 69, 84, 85, 84, 85,
69, 70, 69, 70, 85, 86, 89, 90, 69, 70, 69, 70, 85, 86, 89, 90,
70, 70, 70, 70, 86, 86, 90, 91, 70, 70, 70, 70, 86, 86, 90, 91,
71, 70, 71, 70, 87, 86, 91, 91, 71, 70, 71, 70, 87, 86, 91, 91,
72, 73, 68, 69, 88, 89, 84, 85, 72, 73, 68, 69, 88, 89, 84, 85,
73, 74, 69, 70, 89, 90, 89, 90, 73, 74, 69, 70, 89, 90, 89, 90,
74, 75, 70, 70, 90, 91, 90, 91, 74, 75, 70, 70, 90, 91, 90, 91,
75, 75, 71, 70, 91, 91, 91, 91, 75, 75, 71, 70, 91, 91, 91, 91,
76, 77, 68, 69, 92, 93, 84, 85, 76, 77, 68, 69, 92, 93, 84, 85,
77, 78, 69, 70, 93, 94, 89, 90, 77, 78, 69, 70, 93, 94, 89, 90,
78, 79, 70, 70, 94, 95, 90, 91, 78, 79, 70, 70, 94, 95, 90, 91,
79, 79, 71, 70, 95, 95, 91, 91, 79, 79, 71, 70, 95, 95, 91, 91,
80, 81, 84, 85, 80, 81, 84, 85, 144, 145, 148, 149, 144, 145, 148, 149,
81, 81, 85, 86, 81, 81, 85, 86, 145, 145, 149, 150, 145, 145, 149, 150,
82, 81, 86, 86, 82, 81, 86, 86, 146, 145, 150, 150, 146, 145, 150, 150,
83, 81, 87, 86, 83, 81, 87, 86, 147, 145, 151, 150, 147, 145, 151, 150,
84, 85, 84, 85, 100, 101, 100, 101, 148, 149, 148, 149, 164, 165, 164, 165,
85, 86, 89, 90, 101, 102, 105, 106, 149, 150, 153, 154, 165, 166, 169, 170,
86, 86, 90, 91, 102, 102, 106, 107, 150, 150, 154, 155, 166, 166, 170, 171,
87, 86, 91, 91, 103, 102, 107, 107, 151, 150, 155, 155, 167, 166, 171, 171,
88, 89, 84, 85, 104, 105, 100, 101, 152, 153, 148, 149, 168, 169, 164, 165,
89, 90, 89, 90, 105, 106, 105, 106, 153, 154, 153, 154, 169, 170, 169, 170,
90, 91, 90, 91, 106, 107, 110, 111, 154, 155, 154, 155, 170, 171, 174, 175,
91, 91, 91, 91, 107, 107, 111, 111, 155, 155, 155, 155, 171, 171, 175, 175,
92, 93, 84, 85, 108, 109, 100, 101, 156, 157, 148, 149, 172, 173, 164, 165,
93, 94, 89, 90, 109, 110, 105, 106, 157, 158, 153, 154, 173, 174, 169, 170,
94, 95, 90, 91, 110, 111, 110, 111, 158, 159, 154, 155, 174, 175, 174, 175,
95, 95, 91, 91, 111, 111, 111, 111, 159, 159, 155, 155, 175, 175, 175, 175,
96, 97, 100, 101, 80, 81, 84, 85, 160, 161, 164, 165, 144, 145, 148, 149,
97, 97, 101, 102, 81, 81, 85, 86, 161, 161, 165, 166, 145, 145, 149, 150,
98, 97, 102, 102, 82, 81, 86, 86, 162, 161, 166, 166, 146, 145, 150, 150,
99, 97, 103, 102, 83, 81, 87, 86, 163, 161, 167, 166, 147, 145, 151, 150,
100, 101, 100, 101, 100, 101, 100, 101, 164, 165, 164, 165, 164, 165, 164, 165,
101, 102, 105, 106, 101, 102, 105, 106, 165, 166, 169, 170, 165, 166, 169, 170,
102, 102, 106, 107, 102, 102, 106, 107, 166, 166, 170, 171, 166, 166, 170, 171,
103, 102, 107, 107, 103, 102, 107, 107, 167, 166, 171, 171, 167, 166, 171, 171,
104, 105, 100, 101, 104, 105, 100, 101, 168, 169, 164, 165, 184, 185, 180, 181,
105, 106, 105, 106, 105, 106, 105, 106, 169, 170, 169, 170, 185, 186, 185, 186,
106, 107, 110, 111, 106, 107, 110, 111, 170, 171, 174, 175, 186, 187, 190, 191,
107, 107, 111, 111, 107, 107, 111, 111, 171, 171, 175, 175, 187, 187, 191, 191,
108, 109, 100, 101, 108, 109, 100, 101, 172, 173, 164, 165, 188, 189, 180, 181,
109, 110, 105, 106, 109, 110, 105, 106, 173, 174, 169, 170, 189, 190, 185, 186,
110, 111, 110, 111, 110, 111, 110, 111, 174, 175, 174, 175, 190, 191, 190, 191,
111, 111, 111, 111, 111, 111, 111, 111, 175, 175, 175, 175, 191, 191, 0, 0,
112, 113, 116, 117, 80, 81, 84, 85, 176, 177, 180, 181, 144, 145, 148, 149,
113, 113, 117, 118, 81, 81, 85, 86, 177, 177, 181, 182, 145, 145, 149, 150,
114, 113, 118, 118, 82, 81, 86, 86, 178, 177, 182, 182, 146, 145, 150, 150,
115, 113, 119, 118, 83, 81, 87, 86, 179, 177, 183, 182, 147, 145, 151, 150,
116, 117, 116, 117, 100, 101, 100, 101, 180, 181, 180, 181, 164, 165, 164, 165,
117, 118, 121, 122, 101, 102, 105, 106, 181, 182, 185, 186, 165, 166, 169, 170,
118, 118, 122, 123, 102, 102, 106, 107, 182, 182, 186, 187, 166, 166, 170, 171,
119, 118, 123, 123, 103, 102, 107, 107, 183, 182, 187, 187, 167, 166, 171, 171,
120, 121, 116, 117, 104, 105, 100, 101, 184, 185, 180, 181, 184, 185, 180, 181,
121, 122, 121, 122, 105, 106, 105, 106, 185, 186, 185, 186, 185, 186, 185, 186,
122, 123, 126, 127, 106, 107, 110, 111, 186, 187, 190, 191, 186, 187, 190, 191,
123, 123, 127, 127, 107, 107, 111, 111, 187, 187, 191, 191, 187, 187, 191, 191,
124, 125, 116, 117, 108, 109, 100, 101, 188, 189, 180, 181, 188, 189, 180, 181,
125, 126, 121, 122, 109, 110, 105, 106, 189, 190, 185, 186, 189, 190, 185, 186,
126, 127, 126, 127, 110, 111, 110, 111, 190, 191, 190, 191, 190, 191, 190, 191,
127, 127, 0, 0, 111, 111, 111, 111, 191, 191, 0, 0, 191, 191, 0, 0,
128, 129, 132, 133, 144, 145, 148, 149, 64, 65, 68, 69, 80, 81, 84, 85,
129, 129, 133, 134, 145, 145, 149, 150, 65, 65, 69, 70, 81, 81, 85, 86,
130, 129, 134, 134, 146, 145, 150, 150, 66, 65, 70, 70, 82, 81, 86, 86,
131, 129, 135, 134, 147, 145, 151, 150, 67, 65, 71, 70, 83, 81, 87, 86,
132, 133, 132, 133, 148, 149, 148, 149, 68, 69, 68, 69, 84, 85, 84, 85,
133, 134, 133, 134, 149, 150, 153, 154, 69, 70, 69, 70, 85, 86, 89, 90,
134, 134, 134, 134, 150, 150, 154, 155, 70, 70, 70, 70, 86, 86, 90, 91,
135, 134, 135, 134, 151, 150, 155, 155, 71, 70, 71, 70, 87, 86, 91, 91,
136, 137, 132, 133, 152, 153, 148, 149, 72, 73, 68, 69, 88, 89, 84, 85,
137, 138, 133, 134, 153, 154, 153, 154, 73, 74, 69, 70, 89, 90, 89, 90,
138, 139, 134, 134, 154, 155, 154, 155, 74, 75, 70, 70, 90, 91, 90, 91,
139, 139, 135, 134, 155, 155, 155, 155, 75, 75, 71, 70, 91, 91, 91, 91,
140, 141, 132, 133, 156, 157, 148, 149, 76, 77, 68, 69, 92, 93, 84, 85,
141, 142, 133, 134, 157, 158, 153, 154, 77, 78, 69, 70, 93, 94, 89, 90,
142, 143, 134, 134, 158, 159, 154, 155, 78, 79, 70, 70, 94, 95, 90, 91,
143, 143, 135, 134, 159, 159, 155, 155, 79, 79, 71, 70, 95, 95, 91, 91,
144, 145, 148, 149, 144, 145, 148, 149, 144, 145, 148, 149, 144, 145, 148, 149,
145, 145, 149, 150, 145, 145, 149, 150, 145, 145, 149, 150, 145, 145, 149, 150,
146, 145, 150, 150, 146, 145, 150, 150, 146, 145, 150, 150, 146, 145, 150, 150,
147, 145, 151, 150, 147, 145, 151, 150, 147, 145, 151, 150, 147, 145, 151, 150,
148, 149, 148, 149, 164, 165, 164, 165, 148, 149, 148, 149, 164, 165, 164, 165,
149, 150, 153, 154, 165, 166, 169, 170, 149, 150, 153, 154, 165, 166, 169, 170,
150, 150, 154, 155, 166, 166, 170, 171, 150, 150, 154, 155, 166, 166, 170, 171,
151, 150, 155, 155, 167, 166, 171, 171, 151, 150, 155, 155, 167, 166, 171, 171,
152, 153, 148, 149, 168, 169, 164, 165, 152, 153, 148, 149, 168, 169, 164, 165,
153, 154, 153, 154, 169, 170, 169, 170, 153, 154, 153, 154, 169, 170, 169, 170,
154, 155, 154, 155, 170, 171, 174, 175, 154, 155, 154, 155, 170, 171, 174, 175,
155, 155, 155, 155, 171, 171, 175, 175, 155, 155, 155, 155, 171, 171, 175, 175,
156, 157, 148, 149, 172, 173, 164, 165, 156, 157, 148, 149, 172, 173, 164, 165,
157, 158, 153, 154, 173, 174, 169, 170, 157, 158, 153, 154, 173, 174, 169, 170,
158, 159, 154, 155, 174, 175, 174, 175, 158, 159, 154, 155, 174, 175, 174, 175,
159, 159, 155, 155, 175, 175, 175, 175, 159, 159, 155, 155, 175, 175, 175, 175,
160, 161, 164, 165, 144, 145, 148, 149, 224, 225, 228, 229, 208, 209, 212, 213,
161, 161, 165, 166, 145, 145, 149, 150, 225, 225, 229, 230, 209, 209, 213, 214,
162, 161, 166, 166, 146, 145, 150, 150, 226, 225, 230, 230, 210, 209, 214, 214,
163, 161, 167, 166, 147, 145, 151, 150, 227, 225, 231, 230, 211, 209, 215, 214,
164, 165, 164, 165, 164, 165, 164, 165, 228, 229, 228, 229, 228, 229, 228, 229,
165, 166, 169, 170, 165, 166, 169, 170, 229, 230, 233, 234, 229, 230, 233, 234,
166, 166, 170, 171, 166, 166, 170, 171, 230, 230, 234, 235, 230, 230, 234, 235,
167, 166, 171, 171, 167, 166, 171, 171, 231, 230, 235, 235, 231, 230, 235, 235,
168, 169, 164, 165, 184, 185, 180, 181, 232, 233, 228, 229, 248, 249, 244, 245,
169, 170, 169, 170, 185, 186, 185, 186, 233, 234, 233, 234, 249, 250, 249, 250,
170, 171, 174, 175, 186, 187, 190, 191, 234, 235, 238, 239, 250, 251, 254, 255,
171, 171, 175, 175, 187, 187, 191, 191, 235, 235, 239, 239, 251, 251, 255, 255,
172, 173, 164, 165, 188, 189, 180, 181, 236, 237, 228, 229, 252, 253, 244, 245,
173, 174, 169, 170, 189, 190, 185, 186, 237, 238, 233, 234, 253, 254, 249, 250,
174, 175, 174, 175, 190, 191, 190, 191, 238, 239, 238, 239, 254, 255, 254, 255,
175, 175, 175, 175, 191, 191, 0, 0, 239, 239, 239, 239, 255, 255, 0, 0,
176, 177, 180, 181, 144, 145, 148, 149, 240, 241, 244, 245, 208, 209, 212, 213,
177, 177, 181, 182, 145, 145, 149, 150, 241, 241, 245, 246, 209, 209, 213, 214,
178, 177, 182, 182, 146, 145, 150, 150, 242, 241, 246, 246, 210, 209, 214, 214,
179, 177, 183, 182, 147, 145, 151, 150, 243, 241, 247, 246, 211, 209, 215, 214,
180, 181, 180, 181, 164, 165, 164, 165, 244, 245, 244, 245, 228, 229, 228, 229,
181, 182, 185, 186, 165, 166, 169, 170, 245, 246, 249, 250, 229, 230, 233, 234,
182, 182, 186, 187, 166, 166, 170, 171, 246, 246, 250, 251, 230, 230, 234, 235,
183, 182, 187, 187, 167, 166, 171, 171, 247, 246, 251, 251, 231, 230, 235, 235,
184, 185, 180, 181, 184, 185, 180, 181, 248, 249, 244, 245, 248, 249, 244, 245,
185, 186, 185, 186, 185, 186, 185, 186, 249, 250, 249, 250, 249, 250, 249, 250,
186, 187, 190, 191, 186, 187, 190, 191, 250, 251, 254, 255, 250, 251, 254, 255,
187, 187, 191, 191, 187, 187, 191, 191, 251, 251, 255, 255, 251, 251, 255, 255,
188, 189, 180, 181, 188, 189, 180, 181, 252, 253, 244, 245, 252, 253, 244, 245,
189, 190, 185, 186, 189, 190, 185, 186, 253, 254, 249, 250, 253, 254, 249, 250,
190, 191, 190, 191, 190, 191, 190, 191, 254, 255, 254, 255, 254, 255, 254, 255,
191, 191, 0, 0, 191, 191, 0, 0, 255, 255, 0, 0, 255, 255, 0, 0,
192, 193, 196, 197, 208, 209, 212, 213, 64, 65, 68, 69, 80, 81, 84, 85,
193, 193, 197, 198, 209, 209, 213, 214, 65, 65, 69, 70, 81, 81, 85, 86,
194, 193, 198, 198, 210, 209, 214, 214, 66, 65, 70, 70, 82, 81, 86, 86,
195, 193, 199, 198, 211, 209, 215, 214, 67, 65, 71, 70, 83, 81, 87, 86,
196, 197, 196, 197, 212, 213, 212, 213, 68, 69, 68, 69, 84, 85, 84, 85,
197, 198, 197, 198, 213, 214, 217, 218, 69, 70, 69, 70, 85, 86, 89, 90,
198, 198, 198, 198, 214, 214, 218, 219, 70, 70, 70, 70, 86, 86, 90, 91,
199, 198, 199, 198, 215, 214, 219, 219, 71, 70, 71, 70, 87, 86, 91, 91,
200, 201, 196, 197, 216, 217, 212, 213, 72, 73, 68, 69, 88, 89, 84, 85,
201, 202, 197, 198, 217, 218, 217, 218, 73, 74, 69, 70, 89, 90, 89, 90,
202, 203, 198, 198, 218, 219, 218, 219, 74, 75, 70, 70, 90, 91, 90, 91,
203, 203, 199, 198, 219, 219, 219, 219, 75, 75, 71, 70, 91, 91, 91, 91,
204, 205, 196, 197, 220, 221, 212, 213, 76, 77, 68, 69, 92, 93, 84, 85,
205, 206, 197, 198, 221, 222, 217, 218, 77, 78, 69, 70, 93, 94, 89, 90,
206, 207, 198, 198, 222, 223, 218, 219, 78, 79, 70, 70, 94, 95, 90, 91,
207, 207, 199, 198, 223, 223, 219, 219, 79, 79, 71, 70, 95, 95, 91, 91,
208, 209, 212, 213, 208, 209, 212, 213, 144, 145, 148, 149, 144, 145, 148, 149,
209, 209, 213, 214, 209, 209, 213, 214, 145, 145, 149, 150, 145, 145, 149, 150,
210, 209, 214, 214, 210, 209, 214, 214, 146, 145, 150, 150, 146, 145, 150, 150,
211, 209, 215, 214, 211, 209, 215, 214, 147, 145, 151, 150, 147, 145, 151, 150,
212, 213, 212, 213, 228, 229, 228, 229, 148, 149, 148, 149, 164, 165, 164, 165,
213, 214, 217, 218, 229, 230, 233, 234, 149, 150, 153, 154, 165, 166, 169, 170,
214, 214, 218, 219, 230, 230, 234, 235, 150, 150, 154, 155, 166, 166, 170, 171,
215, 214, 219, 219, 231, 230, 235, 235, 151, 150, 155, 155, 167, 166, 171, 171,
216, 217, 212, 213, 232, 233, 228, 229, 152, 153, 148, 149, 168, 169, 164, 165,
217, 218, 217, 218, 233, 234, 233, 234, 153, 154, 153, 154, 169, 170, 169, 170,
218, 219, 218, 219, 234, 235, 238, 239, 154, 155, 154, 155, 170, 171, 174, 175,
219, 219, 219, 219, 235, 235, 239, 239, 155, 155, 155, 155, 171, 171, 175, 175,
220, 221, 212, 213, 236, 237, 228, 229, 156, 157, 148, 149, 172, 173, 164, 165,
221, 222, 217, 218, 237, 238, 233, 234, 157, 158, 153, 154, 173, 174, 169, 170,
222, 223, 218, 219, 238, 239, 238, 239, 158, 159, 154, 155, 174, 175, 174, 175,
223, 223, 219, 219, 239, 239, 239, 239, 159, 159, 155, 155, 175, 175, 175, 175,
224, 225, 228, 229, 208, 209, 212, 213, 224, 225, 228, 229, 208, 209, 212, 213,
225, 225, 229, 230, 209, 209, 213, 214, 225, 225, 229, 230, 209, 209, 213, 214,
226, 225, 230, 230, 210, 209, 214, 214, 226, 225, 230, 230, 210, 209, 214, 214,
227, 225, 231, 230, 211, 209, 215, 214, 227, 225, 231, 230, 211, 209, 215, 214,
228, 229, 228, 229, 228, 229, 228, 229, 228, 229, 228, 229, 228, 229, 228, 229,
229, 230, 233, 234, 229, 230, 233, 234, 229, 230, 233, 234, 229, 230, 233, 234,
230, 230, 234, 235, 230, 230, 234, 235, 230, 230, 234, 235, 230, 230, 234, 235,
231, 230, 235, 235, 231, 230, 235, 235, 231, 230, 235, 235, 231, 230, 235, 235,
232, 233, 228, 229, 248, 249, 244, 245, 232, 233, 228, 229, 248, 249, 244, 245,
233, 234, 233, 234, 249, 250, 249, 250, 233, 234, 233, 234, 249, 250, 249, 250,
234, 235, 238, 239, 250, 251, 254, 255, 234, 235, 238, 239, 250, 251, 254, 255,
235, 235, 239, 239, 251, 251, 255, 255, 235, 235, 239, 239, 251, 251, 255, 255,
236, 237, 228, 229, 252, 253, 244, 245, 236, 237, 228, 229, 252, 253, 244, 245,
237, 238, 233, 234, 253, 254, 249, 250, 237, 238, 233, 234, 253, 254, 249, 250,
238, 239, 238, 239, 254, 255, 254, 255, 238, 239, 238, 239, 254, 255, 254, 255,
239, 239, 239, 239, 255, 255, 0, 0, 239, 239, 239, 239, 255, 255, 0, 0,
240, 241, 244, 245, 208, 209, 212, 213, 240, 241, 244, 245, 208, 209, 212, 213,
241, 241, 245, 246, 209, 209, 213, 214, 241, 241, 245, 246, 209, 209, 213, 214,
242, 241, 246, 246, 210, 209, 214, 214, 242, 241, 246, 246, 210, 209, 214, 214,
243, 241, 247, 246, 211, 209, 215, 214, 243, 241, 247, 246, 211, 209, 215, 214,
244, 245, 244, 245, 228, 229, 228, 229, 244, 245, 244, 245, 228, 229, 228, 229,
245, 246, 249, 250, 229, 230, 233, 234, 245, 246, 249, 250, 229, 230, 233, 234,
246, 246, 250, 251, 230, 230, 234, 235, 246, 246, 250, 251, 230, 230, 234, 235,
247, 246, 251, 251, 231, 230, 235, 235, 247, 246, 251, 251, 231, 230, 235, 235,
248, 249, 244, 245, 248, 249, 244, 245, 248, 249, 244, 245, 248, 249, 244, 245,
249, 250, 249, 250, 249, 250, 249, 250, 249, 250, 249, 250, 249, 250, 249, 250,
250, 251, 254, 255, 250, 251, 254, 255, 250, 251, 254, 255, 250, 251, 254, 255,
251, 251, 255, 255, 251, 251, 255, 255, 251, 251, 255, 255, 251, 251, 255, 255,
252, 253, 244, 245, 252, 253, 244, 245, 252, 253, 244, 245, 252, 253, 244, 245,
253, 254, 249, 250, 253, 254, 249, 250, 253, 254, 249, 250, 253, 254, 249, 250,
254, 255, 254, 255, 254, 255, 254, 255, 254, 255, 254, 255, 254, 255, 254, 255,
255, 255, 0, 0, 255, 255, 0, 0, 255, 255, 0, 0, 255, 255, 0, 0};

const char transitions2[] =
{0, 1, 4, 5, 16, 17, 20, 21,
1, 1, 5, 6, 17, 17, 21, 22,
2, 1, 6, 6, 18, 17, 22, 22,
3, 1, 7, 6, 19, 17, 23, 22,
4, 5, 4, 5, 20, 21, 20, 21,
5, 6, 5, 6, 21, 22, 25, 26,
6, 6, 6, 6, 22, 22, 26, 27,
7, 6, 7, 6, 23, 22, 27, 27,
8, 9, 4, 5, 24, 25, 20, 21,
9, 10, 5, 6, 25, 26, 25, 26,
10, 11, 6, 6, 26, 27, 26, 27,
11, 11, 7, 6, 27, 27, 27, 27,
12, 13, 4, 5, 28, 29, 20, 21,
13, 14, 5, 6, 29, 30, 25, 26,
14, 15, 6, 6, 30, 31, 26, 27,
15, 0, 7, 6, 31, 0, 27, 27,
16, 17, 20, 21, 16, 17, 20, 21,
17, 17, 21, 22, 17, 17, 21, 22,
18, 17, 22, 22, 18, 17, 22, 22,
19, 17, 23, 22, 19, 17, 23, 22,
20, 21, 20, 21, 36, 37, 36, 37,
21, 22, 25, 26, 37, 38, 41, 42,
22, 22, 26, 27, 38, 38, 42, 43,
23, 22, 27, 27, 39, 38, 43, 43,
24, 25, 20, 21, 40, 41, 36, 37,
25, 26, 25, 26, 41, 42, 41, 42,
26, 27, 26, 27, 42, 43, 46, 47,
27, 27, 27, 27, 43, 43, 47, 0,
28, 29, 20, 21, 44, 45, 36, 37,
29, 30, 25, 26, 45, 46, 41, 42,
30, 31, 26, 27, 46, 47, 46, 47,
31, 0, 27, 27, 47, 0, 47, 0,
32, 33, 36, 37, 16, 17, 20, 21,
33, 33, 37, 38, 17, 17, 21, 22,
34, 33, 38, 38, 18, 17, 22, 22,
35, 33, 39, 38, 19, 17, 23, 22,
36, 37, 36, 37, 36, 37, 36, 37,
37, 38, 41, 42, 37, 38, 41, 42,
38, 38, 42, 43, 38, 38, 42, 43,
39, 38, 43, 43, 39, 38, 43, 43,
40, 41, 36, 37, 56, 57, 52, 53,
41, 42, 41, 42, 57, 58, 57, 58,
42, 43, 46, 47, 58, 59, 62, 63,
43, 43, 47, 0, 59, 59, 63, 0,
44, 45, 36, 37, 60, 61, 52, 53,
45, 46, 41, 42, 61, 62, 57, 58,
46, 47, 46, 47, 62, 63, 62, 63,
47, 0, 47, 0, 63, 0, 63, 0,
48, 49, 52, 53, 16, 17, 20, 21,
49, 49, 53, 54, 17, 17, 21, 22,
50, 49, 54, 54, 18, 17, 22, 22,
51, 49, 55, 54, 19, 17, 23, 22,
52, 53, 52, 53, 36, 37, 36, 37,
53, 54, 57, 58, 37, 38, 41, 42,
54, 54, 58, 59, 38, 38, 42, 43,
55, 54, 59, 59, 39, 38, 43, 43,
56, 57, 52, 53, 56, 57, 52, 53,
57, 58, 57, 58, 57, 58, 57, 58,
58, 59, 62, 63, 58, 59, 62, 63,
59, 59, 63, 0, 59, 59, 63, 0,
60, 61, 52, 53, 60, 61, 52, 53,
61, 62, 57, 58, 61, 62, 57, 58,
62, 63, 62, 63, 62, 63, 62, 63,
63, 0, 63, 0, 63, 0, 63, 0};

DEBUG_NOINLINE inline int and_popcount(const unsigned int* block_1, const unsigned int* block_2, int length) {
	//assert(length % INTS_IN_128_BITS == 0);
	int bit_count = 0;
	const unsigned int* block_1_end = block_1 + length;
	while (block_1 < block_1_end) {
		__m128i t1 = _mm_load_si128((const __m128i*)block_1);
		__m128i t2 = _mm_load_si128((const __m128i*)block_2);
		__m128i t1_and_t2 = _mm_and_si128(t1, t2);
		bit_count += _mm_popcnt_u64(_mm_extract_epi64(t1_and_t2, 0));
		bit_count += _mm_popcnt_u64(_mm_extract_epi64(t1_and_t2, 1));
		block_1 += INTS_IN_128_BITS;
		block_2 += INTS_IN_128_BITS;
	}
	return bit_count;
}

DEBUG_NOINLINE inline int ApplyLevenshteinMasks(const unsigned int* queryWordMask, const unsigned int* documentWordMask, const unsigned int length) {
	/*
	int count = 0;
	for(unsigned int i = 0u; i < length; ++i) {
		count += ((queryWordMask[i] & documentWordMask[i]) == 0);
	}
	return count;
	*/
	return length - and_popcount(queryWordMask, documentWordMask, length);
}

// Computes Hamming distance between a null-terminated string "a" with length "na"
// and a null-terminated string "b"
DEBUG_NOINLINE inline bool CheckHammingDistance_1(const char* a, int na, const char* b) {
#ifdef PRINT_STATISTICS
	__sync_fetch_and_add(&(Statistics::checkHammingDistance1Calls), 1);
#endif

#ifdef USE_SSE4
	__m128i a1 = _mm_loadu_si128( (const __m128i*)a);
	__m128i b1 = _mm_loadu_si128( (const __m128i*)b);
	__m128i res = _mm_cmpestrm(a1, na, b1, na, _SIDD_UBYTE_OPS | _SIDD_CMP_EQUAL_EACH | _SIDD_NEGATIVE_POLARITY);
	unsigned long long bits = _mm_extract_epi64(res, 0);

	int cnt = _mm_popcnt_u64(bits);
	if (cnt > 1)
		return false;

	if (na > 16) {
		a1 = _mm_loadu_si128( (const __m128i*)(a + 16));
		b1 = _mm_loadu_si128( (const __m128i*)(b + 16));
		res = _mm_cmpestrm(a1, na - 16, b1, na - 16, _SIDD_UBYTE_OPS | _SIDD_CMP_EQUAL_EACH | _SIDD_NEGATIVE_POLARITY);
		bits = _mm_extract_epi64(res, 0);
		cnt += _mm_popcnt_u64(bits);

		if (cnt > 1)
			return false;
	}

	return true;
#else
	int num_mismatches = 0;
	for (int i = 0; i < na; ++i) {
		if(a[i] != b[i]) {
			if (++num_mismatches == 2) {
				return false;
			}
		}
	}
	return true;
#endif
}

DEBUG_NOINLINE inline bool CheckHammingDistance_2(const char* a, int na, const char* b) {
#ifdef PRINT_STATISTICS
	__sync_fetch_and_add(&(Statistics::checkHammingDistance2Calls), 1);
#endif

#ifdef USE_SSE4
	__m128i a1 = _mm_loadu_si128( (const __m128i*)a);
	__m128i b1 = _mm_loadu_si128( (const __m128i*)b);
	__m128i res = _mm_cmpestrm(a1, na, b1, na, _SIDD_UBYTE_OPS | _SIDD_CMP_EQUAL_EACH | _SIDD_NEGATIVE_POLARITY);
	unsigned long long bits = _mm_extract_epi64(res, 0);

	int cnt = _mm_popcnt_u64(bits);
	if (cnt > 2)
		return false;

	if (na > 16) {
		a1 = _mm_loadu_si128( (const __m128i*)(a + 16));
		b1 = _mm_loadu_si128( (const __m128i*)(b + 16));
		res = _mm_cmpestrm(a1, na - 16, b1, na - 16, _SIDD_UBYTE_OPS | _SIDD_CMP_EQUAL_EACH | _SIDD_NEGATIVE_POLARITY);
		bits = _mm_extract_epi64(res, 0);
		cnt += _mm_popcnt_u64(bits);

		if (cnt > 2)
			return false;
	}

	return true;
#else
	int num_mismatches = 0;
	for (int i = 0; i < na; ++i) {
		if(a[i] != b[i]) {
			if (++num_mismatches == 3) {
				return false;
			}
		}
	}
	return true;
#endif
}

DEBUG_NOINLINE inline bool CheckHammingDistance_3(const char* a, int na, const char* b) {
#ifdef PRINT_STATISTICS
	__sync_fetch_and_add(&(Statistics::checkHammingDistance3Calls), 1);
#endif

#ifdef USE_SSE4
	__m128i a1 = _mm_loadu_si128( (const __m128i*)a);
	__m128i b1 = _mm_loadu_si128( (const __m128i*)b);
	__m128i res = _mm_cmpestrm(a1, na, b1, na, _SIDD_UBYTE_OPS | _SIDD_CMP_EQUAL_EACH | _SIDD_NEGATIVE_POLARITY);
	unsigned long long bits = _mm_extract_epi64(res, 0);

	int cnt = _mm_popcnt_u64(bits);
	if (cnt > 3)
		return false;

	if (na > 16) {
		a1 = _mm_loadu_si128( (const __m128i*)(a + 16));
		b1 = _mm_loadu_si128( (const __m128i*)(b + 16));
		res = _mm_cmpestrm(a1, na - 16, b1, na - 16, _SIDD_UBYTE_OPS | _SIDD_CMP_EQUAL_EACH | _SIDD_NEGATIVE_POLARITY);
		bits = _mm_extract_epi64(res, 0);
		cnt += _mm_popcnt_u64(bits);

		if (cnt > 3)
			return false;
	}

	return true;
#else
	int num_mismatches = 0;
	for (int i = 0; i < na; ++i) {
		if(a[i] != b[i]) {
			if (++num_mismatches == 4) {
				return false;
			}
		}
	}
	return true;
#endif
}

// Checks that difference between strings "a" and string "b" is less than 2
// Assumes that lengths are equal.
DEBUG_NOINLINE inline bool CheckEditDistance_1_0(const char* a, int na, const char* b) {
#ifdef PRINT_STATISTICS
	__sync_fetch_and_add(&(Statistics::checkEditDistance1Calls), 1);
#endif
	int num_mismatches = 0;
	for (int i = 0; i < na; ++i) {
		if(a[i] != b[i]) {
			if (++num_mismatches == 2) {
				return false;
			}
		}
	}
	return true;
}

// Checks that difference between strings "a" and string "b" is less than 2
// Assumes that strlen(a) + 1 == strlen(b).
DEBUG_NOINLINE inline bool CheckEditDistance_1_1(const char* a, int na, const char* b) {
#ifdef PRINT_STATISTICS
	__sync_fetch_and_add(&(Statistics::checkEditDistance1Calls), 1);
#endif
	unsigned int error = 0;
	int i1 = 0;
	int i2 = 0;
	while (i1 != na) {
		if(a[i1] == b[i2]) {
			++i1;
		} else {
			if (++error == 2) {
				return false;
			}
		}
		++i2;
	}
	return true;
}

// Checks that difference between strings "a" and string "b" is less than 3
// Assumes that lengths are equal.
DEBUG_NOINLINE inline bool CheckEditDistance_2_0(const char* a, int na, const char* b) {
#ifdef PRINT_STATISTICS
	__sync_fetch_and_add(&(Statistics::checkEditDistance2Calls), 1);
#endif
	if (CheckHammingDistance_2(a, na, b)) {
		return true;
	} else {
		bool success_1 = true;
		bool success_2 = true;
		int left = 0;
		int right = na - 1;
		while(a[left] == b[left]) {
			++left;
		}
		while(a[right] == b[right]) {
			--right;
		}
		for(int i = left; i < right; i++) {
			success_1 &= (a[i] == b[i + 1]);
			success_2 &= (a[i + 1] == b[i]);
			if(!success_1 && !success_2) {
				return false;
			}
		}
		return true;
	}
	return true;
}

// Checks that difference between strings "a" and string "b" is less than 3
// Assumes that strlen(a) + 1 == strlen(b).
DEBUG_NOINLINE inline bool CheckEditDistance_2_1(const char* a, int na, const char* b) {
#ifdef PRINT_STATISTICS
	__sync_fetch_and_add(&(Statistics::checkEditDistance2Calls), 1);
#endif
	bool success_1 = true;
	bool success_2 = true;
	int left = 0;
	int right = na;
	while(b[left] == a[left] && left < right - 1) {
		++left;
	}
	while(b[right] == a[right - 1] && left < right - 1) {
		--right;
	}
	for(int i = left + 1; i <= right - 1; ++i) {
		success_1 &= (b[i] == a[i]);
		success_2 &= (b[i] == a[i - 1]);
		if(!success_1 && !success_2) {
			return false;
		}
	}
	return true;
}

// Checks that difference between strings "a" and string "b" is less than 3
// Assumes that strlen(a) + 2 == strlen(b).
DEBUG_NOINLINE inline bool CheckEditDistance_2_2(const char* a, int na, const char* b) {
#ifdef PRINT_STATISTICS
	__sync_fetch_and_add(&(Statistics::checkEditDistance2Calls), 1);
#endif
	unsigned int error = 0;
	int i1 = 0;
	int i2 = 0;
	while (i1 != na) {
		if(a[i1] == b[i2]) {
			++i1;
		} else {
			if (++error == 3) {
				return false;
			}
		}
		++i2;
	}
	return true;
}

// Checks that difference between strings "a" and string "b" <= 3
// Assumes that lengthes are equal.
DEBUG_NOINLINE inline bool CheckEditDistance_3_0(const char* a, int na, const char* b) {
#ifdef PRINT_STATISTICS
	__sync_fetch_and_add(&(Statistics::checkEditDistance3Calls), 1);
#endif
	unsigned int value2, value3;
	// first line
	value2 = (a[0] != b[0]);
	if (a[0] == b[1])
		value3 = 1;
	else
		value3 = value2 + 1;
	int state = 16 | 4 * value2 | value3;
	for (int ia = 2; ia <= na; ++ia) {
		unsigned int b1 = (a[ia - 1] != b[ia - 2]);
		unsigned int b2 = (a[ia - 1] != b[ia - 1]);
		unsigned int b3 = (a[ia - 1] != b[ia]);
		unsigned int i = (b1 << 2) | (b2 << 1) | b3;

		state = transitions[(state << 3) + i];

		if (state == 127)
			return false;
	}
	return true;
}

// Checks that difference between strings "a" and string "b" <= 3
// Assumes that strlen(a) + 1 == strlen(b).
DEBUG_NOINLINE inline bool CheckEditDistance_3_1(const char* a, int na, const char* b) {
#ifdef PRINT_STATISTICS
	__sync_fetch_and_add(&(Statistics::checkEditDistance3Calls), 1);
#endif
	unsigned int value2, value3, value4;
	value2 = (a[0] != b[0]);
	if (a[0] == b[1])
		value3 = 1;
	else
		value3 = value2 + 1;

	if (a[0] == b[2])
		value4 = 2;
	else
		value4 = value3 + 1;

	unsigned int state = (1 << 6) | (value2 << 4) | (value3 << 2) | value4;
	for (int ia = 2; ia <= na; ++ia) {
		unsigned int b1 = (a[ia - 1] != b[ia - 2]);
		unsigned int b2 = (a[ia - 1] != b[ia - 1]);
		unsigned int b3 = (a[ia - 1] != b[ia]);
		unsigned int b4 = (a[ia - 1] != b[ia + 1]);
		unsigned int i = (b1 << 3) | (b2 << 2) | (b3 << 1) | b4;

		state = transitions1[(state << 4) + i];

		if (!state)
			return false;
	}
	return true;
}

// Checks that difference between strings "a" and string "b" <= 3
// Assumes that strlen(a) + 2 == strlen(b).
DEBUG_NOINLINE inline bool CheckEditDistance_3_2(const char* a, int na, const char* b) {
#ifdef PRINT_STATISTICS
	__sync_fetch_and_add(&(Statistics::checkEditDistance3Calls), 1);
#endif
	int ia;

	int value1, value2, value3;

	// first line
	value1 = (a[0] != b[0]);
	if (a[0] == b[1])
		value2 = 1;
	else
		value2 = value1 + 1;
	if (a[0] == b[2])
		value3 = 2;
	else
		value3 = value2 + 1;

	for (ia = 2; ia <= na; ++ia) {
		bool b1 = (a[ia - 1] != b[ia - 1]);
		bool b2 = (a[ia - 1] != b[ia]);
		bool b3 = (a[ia - 1] != b[ia + 1]);

		if (b1) {
			value1++;
		}
		if (b2) {
			value2 = std::min(value2 + 1, value1 + 1);
		}
		if (b3) {
			value3 = std::min(value2 + 1, value3 + 1);
			// 4 == distance (=3) + 1
			if (value3 == 4)
				return false;
		}
	}

	// last line
	return true;
}

// Checks that difference between strings "a" and string "b" <= 3
// Assumes that strlen(a) + 3 == strlen(b).
DEBUG_NOINLINE inline bool CheckEditDistance_3_3(const char* a, int na, const char* b) {
#ifdef PRINT_STATISTICS
	__sync_fetch_and_add(&(Statistics::checkEditDistance3Calls), 1);
#endif
	unsigned int error = 0;
	int i1 = 0;
	int i2 = 0;
	while (i1 != na) {
		if(a[i1] == b[i2]) {
			++i1;
		} else {
			if (++error == 4) {
				return false;
			}
		}
		++i2;
	}

	return true;
}

END_NAMESPACE
